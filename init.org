
* Installation of this ORG file

  *First time*
  Because of some of this elisp makes sure that emacs checks TLS certificates,
  We must first execute/install:
  1. python -m pip install --user certifi
  2. apt-get install gnutls-bin

  Then do =M-x org-babel-load-file= and provide =~/.emacs.d/init.org=. This will
  evaluate every piece of emacs-lisp code available here.

  *Following times*
  Simply reload changes with =C-c i=.

** Guide new users on track

   Ok, nothing to see here. This message is just for lost soules looking in the
   =init.el= file instead of here, in the org-file.

#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;  NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE   ;;
  ;;                                                                          ;;
  ;;                 You are looking in the wrong file...                     ;;
  ;;          Go to the init.org file instead, where you will find            ;;
  ;;               an explanation to all parameters as well.                  ;;
  ;;                                                                          ;;
  ;;                             Good luck!                                   ;;
  ;;                                                                          ;;
  ;;  NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE   ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

* Requirements

  This init-file assumes *Emacs 25* but will probably work with Emacs 24.

#+BEGIN_SRC emacs-lisp
  (let ((minver 24)
        (recver 25))
    (if (< emacs-major-version minver)
        (error "Your Emacs is too old -- this config requires v%s or higher"
               minver)
      (when (< emacs-major-version recver)
        (format-message
         (concat "You are probably fine with Emacs v%s for this init-file, but "
                 "I cannot guarantee it. Recommended version of Emacs is v%s")
         minver recver))))
#+END_SRC

  It also assumes Unix, but could probably be run on other OSes.

#+BEGIN_SRC emacs-lisp
  (let ((recos "gnu/linux"))
    (when (not (string-equal system-type recos))
      (format-message
       (concat "You might be fine with %s as OS for this init-file, but I "
               "cannot guarantee it. Recommended OS is %s")
       system-type recos)))
#+END_SRC

* Preinit stuff

  Here we place thing we would like to load first, for example benchmarking.

** Garbage collect

   Garbage collection is default after 800kB, lets raise it some.
   This might speedup Emacs but will cost in memory consumtion.

#+BEGIN_SRC emacs-lisp
  (setq-default gc-cons-threshold 10000000) ;; 10mB
#+END_SRC

** Load paths

   So I have a directory ~.emacs.d/other/~ from where I want to load
   custom elisp files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "other" user-emacs-directory))
#+END_SRC

** Benchmarking

   This will measure how fast/slow different elisp files are to load.
   When Emacs have started, do =C-h v sanityinc/require-times=
   Thank you Steve Purcell!

#+BEGIN_SRC emacs-lisp
  (defun sanityinc/time-subtract-millis (b a)
    (* 1000.0 (float-time (time-subtract b a))))

  (defvar sanityinc/require-times nil
    "A list of (FEATURE . LOAD-DURATION).
  LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

  (defadvice require
    (around build-require-times (feature &optional filename noerror) activate)
    "Note in `sanityinc/require-times' the time taken to require each feature."
    (let* ((already-loaded (memq feature features))
           (require-start-time (and (not already-loaded) (current-time))))
      (prog1
          ad-do-it
        (when (and (not already-loaded) (memq feature features))
          (add-to-list 'sanityinc/require-times
                       (cons feature
                             (sanityinc/time-subtract-millis (current-time)
                                                             require-start-time))
                       t)))))
#+END_SRC

* Packages

  First of all, let us add some security.

  This is taken from the blog post:
  "Your Text Editor Is Malware" on <2015-11-12 Thu>
  https://glyph.twistedmatrix.com/2015/11/editor-malware.html

  Two things are needed for this to work.
  1. python -m pip install --user certifi
  2. apt-get install gnutls-bin

  Debug level; 0 minimum
#+BEGIN_SRC emacs-lisp
  (setq gnutls-log-level 0)
#+END_SRC

  Check if a certificate can be trusted
#+BEGIN_SRC emacs-lisp
  (setq tls-checktrust 'ask)
#+END_SRC

  Set the trustfile and which program to use.
#+BEGIN_SRC emacs-lisp
  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python -m certifi")))))
    ;; (setq tls-program
    ;;       (list
    ;;        (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
    ;;                (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error nil)
    (setq gnutls-trustfiles (list trustfile))
    (add-to-list 'gnutls-trustfiles "/etc/ssl/certs/ca-certificates.crt")
    (add-to-list 'gnutls-trustfiles "/etc/pki/tls/certs/ca-bundle.crt")
    (add-to-list 'gnutls-trustfiles "/etc/ssl/ca-bundle.pem")
    (add-to-list 'gnutls-trustfiles "/usr/ssl/certs/ca-bundle.crt")
    (add-to-list 'gnutls-trustfiles "/usr/local/share/certs/ca-root-nss.crt"))
#+END_SRC

  This can be evaluated against the following snippet. If you evaluate it and
  you get an error, your trust roots aren’t set up right and you can’t connect
  to a valid site.

#+BEGIN_SRC emacs-lisp :tangle no
  (if (condition-case e
          (progn
            (url-retrieve "https://wrong-host.badssl.com/"
                          (lambda (retrieved) t))
            (url-retrieve "https://self-signed.badssl.com/"
                          (lambda (retrieved) t))
            t)
        ('error nil))
      (error "tls misconfigured")
    (url-retrieve "https://badssl.com"
                  (lambda (retrieved) t)))
#+END_SRC

  I want my packages to install into the =~/.emacs.d/elpa/= directory.

#+BEGIN_SRC emacs-lisp
  (defconst elpa-dir "elpa"
    "Which directory elpa packages is installed in. Defined in package.el.")
#+END_SRC

  Initiate packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(
          ("gnu"       . "https://elpa.gnu.org/packages/")
          ("melpa"     . "https://melpa.org/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("elpy"      . "https://jorgenschaefer.github.io/packages/")
          ))

  (unless (file-exists-p  (concat user-emacs-directory elpa-dir))
    (message "No packages exists yet, refreshing archives.")
    (package-refresh-contents))

  (package-initialize)
#+END_SRC

  We also define a function for automatic installation of packages, to be used
  on demand.

#+BEGIN_SRC emacs-lisp
  (defun ensure-pkg (&rest pkgs)
    "If package PKG is not installed, install it."
    (dolist (pkg pkgs)
      (unless (package-installed-p pkg)
        (progn
          (unless (assoc pkg package-archive-contents)
            (package-refresh-contents))
          (package-install pkg)))))
#+END_SRC

* Speedup and general annoyance

** Bi-directional text

   Bidi should never be turned off, the emacs display system is, apparently,
   too dependent on it. However, telling it to always print text =left-to-right=
   should speed things up if you never have any bi-directional text to view.

#+BEGIN_SRC emacs-lisp
  (setq-default bidi-paragraph-direction 'left-to-right)
#+END_SRC

** Scratch buffer

   Clear the comments from the Scratch-buffer.

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

** Open the .emacs-file

   Open this file when ~C-c e~ is pressed.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'open-dot-emacs)
  (defun open-dot-emacs ()
    (interactive)
    (let ((user-init-file-org (concat (file-name-directory user-init-file)
                                      (file-name-base user-init-file)
                                      ".org")))
      (if (file-exists-p user-init-file-org)
          (find-file user-init-file-org)
        (find-file user-init-file))))
#+END_SRC

** Easier other-window
  Instead of doing ~C-x o~ every time I want to switch window, I can just do
  ~C-<tab>~. Also, on ~C-S-<tab>~ I go backwards instead.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<tab>") 'other-window)
  (global-set-key (kbd "<C-S-iso-lefttab>") 'select-previous-window)
  (defun select-previous-window ()
    (interactive)
    (select-window (previous-window)))
#+END_SRC

** Fullscreen

  Fullscreen on ~<F11>~

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f11>") 'fullscreen)
  (defun fullscreen ()
    (interactive)
    (set-frame-parameter nil 'fullscreen
                         (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
#+END_SRC

** Whitespace
*** Remove tabs

    Call this function to replace all tabs in the current buffer with spaces.

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    "Untabify current buffer."
    (interactive)
    (save-excursion (untabify (point-min) (point-max))))
#+END_SRC

*** Spaces over tabs

    Also, I prefer spaces to tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Show tabs and trailing whitespace

    Show some whitespaces I hate everywhere.

    Styles:
    |-------------------------+------------------------------------------------|
    | face                    | enable all visualization via faces instead of  |
    |                         | via a display table. This value must be set to |
    |                         | make any of the following group to work.       |
    |-------------------------+------------------------------------------------|
    | trailing                | trailing blanks                                |
    | tabs                    | TABs                                           |
    | spaces                  | SPACEs and HARD SPACEs                         |
    | lines                   | lines which have columns beyond                |
    |                         | ‘whitespace-line-column’. Whole line is        |
    |                         | highlighted.                                   |
    | lines-tail              | lines which have columns beyond                |
    |                         | ‘whitespace-line-column’.                      |
    | newline                 | NEWLINEs                                       |
    | empty                   | empty lines at beginning and/or end of buffer. |
    | indentation::tab        | 8 or more SPACEs at beginning of line.         |
    | indentation::space      | TABs at beginning of line.                     |
    | indentation             | 8 or more SPACEs at beginning of line, if      |
    |                         | ‘indent-tabs-mode’ is non-nil; otherwise, TABs |
    |                         | at beginning of line.                          |
    | big-indent              | Big indentations                               |
    | space-after-tab::tab    | 8 or more SPACEs after a TAB.                  |
    | space-after-tab::space  | TABs are visualized when 8 or more SPACEs      |
    |                         | occur after a TAB.                             |
    | space-after-tab         | 8 or more SPACEs after a TAB are visualized,   |
    |                         | if ‘indent-tabs-mode’ is non-nil; otherwise,   |
    |                         | the TABs.                                      |
    | space-before-tab::tab   | SPACEs before TAB                              |
    | space-before-tab::space | TABs when SPACEs occur before TAB.             |
    | space-before-tab        | SPACEs before TAB are visualized, if           |
    |                         | ‘indent-tabs-mode’ is non-nil; otherwise, the  |
    |                         | TABs.                                          |
    |-------------------------+------------------------------------------------|
    | space-mark              | SPACEs and HARD SPACEs                         |
    | tab-mark                | TABs                                           |
    | newline-mark            | NEWLINEs                                       |
    |-------------------------+------------------------------------------------|

#+BEGIN_SRC emacs-lisp
  (setq whitespace-style '(face trailing tabs lines-tail))
  (global-whitespace-mode 1)
#+END_SRC

** Remove suspend

   Minimizing Emacs when ~C-z~ is pressed is a real annoyance if you are drunk
   typing.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'eof)
#+END_SRC

** Unset mouse

   On my laptop I have a touchpad which arbitrarily clicks when I am typing.

#+BEGIN_SRC emacs-lisp
(defun global-unset-mouse ()
  "Unset all mouse events"
  (interactive)
  (dolist (k '([mouse-1] [down-mouse-1] [drag-mouse-1]
               [double-mouse-1] [triple-mouse-1]
               [mouse-2] [down-mouse-2] [drag-mouse-2]
               [double-mouse-2] [triple-mouse-2]
               [mouse-3] [down-mouse-3] [drag-mouse-3]
               [double-mouse-3] [triple-mouse-3]
               [mouse-4] [down-mouse-4] [drag-mouse-4]
               [double-mouse-4] [triple-mouse-4]
               [mouse-5] [down-mouse-5] [drag-mouse-5]
               [double-mouse-5] [triple-mouse-5]
               [C-mouse-5] [S-mouse-5] [C-mouse-4] [S-mouse-4]
               [C-down-mouse-1] [C-down-mouse-3]))
   (global-unset-key k)))
#+END_SRC

** Create directories

   Create the given directories if I specify a path that does not exist.

#+BEGIN_SRC emacs-lisp
(defun create-non-existent-directory ()
  "If The parent directory does not exist, this function will ask to create it."
  (let ((parent-directory (file-name-directory buffer-file-name))
        (q "Directory `%s' does not exist! Create it?"))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p
                (format q parent-directory)))
      (make-directory parent-directory t))))
#+END_SRC

** Winner mode

   Winner mode is a global minor mode that records the changes in the window
   configuration (i.e. how the frames are partitioned into windows) so that the
   changes can be "undone" using the command ‘winner-undo’.  By default this one
   is bound to the key sequence ‘C-c <left>’.  If you change your mind (while
   undoing), you can press ‘C-c <right>’ (calling ‘winner-redo’).

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** Toolbars and menues

   Remove the scrollbars, toolbars and menues. Who needs them anyways?

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

** Uniquify

   Really cool feature.

   Emacs's traditional method for making buffer names unique adds <2>, <3>,
   etc. to the end of (all but one of) the buffers.  This file replaces that
   behavior, for buffers visiting files and dired buffers, with a uniquification
   that adds parts of the file name until the buffer names are unique.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
#+END_SRC

    How to construct unique buffer names for files with the same base name.  The
    value can be one of: ‘forward’, ‘reverse’, ‘post-forward’,
    ‘post-forward-angle-brackets’, or nil.

    For example, the files =/foo/bar/mumble/name= and =/baz/quux/mumble/name=
    would have the following buffer names in the various styles:

    forward                       bar/mumble/name    quux/mumble/name
    reverse                       name\mumble\bar    name\mumble\quux
    post-forward                  name|bar/mumble    name|quux/mumble
    post-forward-angle-brackets   name<bar/mumble>   name<quux/mumble>
    nil                           name               name<2>

    The "mumble" part may be stripped as well, depending on the setting of
    `uniquify-strip-common-suffix'.

#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward
        uniquify-strip-common-suffix t)
#+END_SRC

** Misc

   Instead of having to type "yes<Enter>" or "no<Enter>" when prompted, just
   pressing "y" or "n" should be enough.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

   Also show which character the point is on next to the line-number.

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

** Backup

   Backup unsaved files.

   This should be quite self-explanatory.

#+BEGIN_SRC emacs-lisp
  (setq
     backup-by-copying t             ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.emacs.d/.saves")) ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)              ; use versioned backups
#+END_SRC

** Printer

   Setting up the LPR (line printer). You can find your printer name
   by `lpstat -d -p' in a shell.

#+BEGIN_SRC
  (setq printer-name "Pull_Print_Unix")
#+END_SRC

* Magit

  Magit is in my opinion invalueable. It is the best git-manager there is!

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'magit)
  (require 'magit)
#+END_SRC

  I like to change windows with C-<tab>

#+BEGIN_SRC emacs-lisp
  (define-key magit-mode-map (kbd "C-<tab>") 'other-window)
#+END_SRC

  Open magit-status in anywhere I am.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'magit-status)
#+END_SRC

* Org

  Org-mode is a mode for keeping notes, maintaining ToDo lists, and
  doing project planning with a fast and effective plain-text system.

  Org is one of the most powerful modes in Emacs. It is used for
  organizing and keeping track of activities, notes, dates, and for
  writing papers etc. It can also export your notes to pdf, html,
  ascii etc. It is super cool and in my opinion
  invaluable!  [fn:organize-your-life-in-plain-text]

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'org)
  (require 'org)
#+END_SRC

  There are three top keys that should always work whereever you are.
  Store a link to a file, capture a new task, and open the org-agenda.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

  Where to keep Org agenda files. This is a list of all places where
  Org should look for files.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/ORG/"))
#+END_SRC

  Monday is the first day of the week

#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
#+END_SRC

  C-a and C-e will ignore some stuff on first attempt

  Non-nil means ‘C-a’ and ‘C-e’ behave specially in headlines and
  items.

  When t, ‘C-a’ will bring back the cursor to the beginning of the
  headline text, i.e. after the stars and after a possible TODO
  keyword.  In an item, this will be the position after bullet and
  check-box, if any.  When the cursor is already at that position,
  another ‘C-a’ will bring it to the beginning of the line.

  ‘C-e’ will jump to the end of the headline, ignoring the presence of
  tags in the headline.  A second ‘C-e’ will then jump to the true end
  of the line, after any tags.  This also means that, when this
  variable is non-nil, ‘C-e’ also will never jump beyond the end of
  the heading of a folded section, i.e. not after the ellipses.

  When set to the symbol ‘reversed’, the first ‘C-a’ or ‘C-e’ works
  normally, going to the true line boundary first.  Only a directly
  following, identical keypress will bring the cursor to the special
  positions.

  This may also be a cons cell where the behavior for ‘C-a’ and ‘C-e’
  is set separately.

#+BEGIN_SRC emacs-lisp
  (setq org-special-ctrl-a/e t)
#+END_SRC

  Adapt indentation to the outline node level.  When this variable is
  set, Org assumes that you write outlines by indenting text in each
  node to align with the headline (after the stars).

#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation t)
#+END_SRC

  TeX-like sub and superscripts with X^{some} and Y_{thing}

#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts '{})
#+END_SRC

  I really like to change windows with C-<tab>

#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-<tab>") 'other-window)
#+END_SRC

* Eshell

  Eshell is a command shell written in Emacs Lisp. Everything it does,
  it uses Emacs’s facilities to do. This means that Eshell is as
  portable as Emacs itself. It also means that cooperation with Lisp
  code is natural and seamless.

  Unlike the other shells in Emacs, Eshell does not inherit from
  comint-mode. This means that hooks and routines written for
  comint-mode won’t work with Eshell.

  For more information check:
  https://www.masteringemacs.org/article/complete-guide-mastering-eshell


  Require eshell is not really needed, but stuff like
  `eshell-visual-commands' does not exist until it is loaded.

#+BEGIN_SRC emacs-lisp
  ;(require 'eshell)
#+END_SRC

** Aliases

  Alias emacs commands to find-file, so it opens as buffers instead of
  new emacses.

#+BEGIN_SRC emacs-lisp
  (defalias 'ec 'find-file)
  (defalias 'emacs 'find-file)
#+END_SRC

** Visual commands

   Some commands are too complex to be displayed by Eshell directly,
   and require special handling. An example would be `top', a program
   that won’t work with a dumb terminal. To support these commands
   Eshell will run a `term' session when you invoke a command Eshell
   considers visual.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'em-term
      (add-to-list 'eshell-visual-commands "ssh")
      (add-to-list 'eshell-visual-commands "htop")
      (add-to-list 'eshell-visual-commands "tail"))
#+END_SRC

** Completion

   If non-nil, hitting the TAB key cycles through the completion list.
   Typical Emacs behavior is to complete as much as possible, then
   pause waiting for further input.  Then if TAB is hit again, show a
   list of possible completions.  When `pcomplete-cycle-completions'
   is non-nil, it acts more like zsh or 4nt, showing the first maximal
   match first, followed by any further matches on each subsequent
   pressing of the TAB key.

#+BEGIN_SRC emacs-lisp
  (setq eshell-cmpl-cycle-completions nil)
#+END_SRC

* Work stuff

  This chapter will handle configuration and packages I need for work.

** Tramp

   Fix so Tramp connects correctly.

#+BEGIN_SRC emacs-lisp
  (setq shell-prompt-pattern "^.*eselnts1349[^>]* *")
#+END_SRC

** Clearcase

   Sometimes I wonder if we are the only one using clearcase. If someone out
   there still use it, you can do it like this.

   Wrap it in a function and you do not need to automatically initiate it. Just
   manually call ~clearcase-mode-on~ when needed.

#+BEGIN_SRC emacs-lisp
  (defun clearcase-mode-on ()
    (interactive)
    (setq directory-sep-char ?/
          ;clearcase-checkin-arguments (quote ("-nc"))
          ;clearcase-checkout-arguments (quote ("-nc"))
          )
    (require 'clearcase))
#+END_SRC

** BT erl

   BT erl is a common-test framework for Erlang. Load it if it exist.

   Remember to set the environment variable `BT_ERL_PATH'.

#+BEGIN_SRC emacs-lisp
  (let ((bt-erl-path (getenv "BT_ERL_PATH")))
    (when (and bt-erl-path (file-exists-p bt-erl-path))
      (add-to-list 'load-path bt-erl-path)
      (require 'emacs_bt)))
#+END_SRC

* Programming

** Erlang

   The best programming language there is!

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'erlang)
  (require 'erlang-start)
#+END_SRC

  Erlang root directory.  The directory where the Erlang system is
  installed.  The name should not contain the trailing slash.

#+BEGIN_SRC emacs-lisp
  (setq erlang-root-dir "/opt/erlang/19.0")
#+END_SRC

*** EDTS

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'edts)
  (require 'edts-start)
#+END_SRC

  Start EDTS when Erlang starts.

#+BEGIN_SRC emacs-lisp
  ; (add-hook 'erlang-mode-hook '(lambda () (require 'edts-start)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq edts-man-root "/opt/erlang/19.0/lib/erlang")
#+END_SRC

** Elisp

   The second best programming language there is! :)

#+BEGIN_SRC emacs-lisp
#+END_SRC

** (Node-)JS

   Use js-comint-mode

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'js-comint)
  (require 'js-comint)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq inferior-js-program-command "node")
#+END_SRC

   Start nodejs in background on C-c C-k

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'js-mode
    (define-key js-mode-map (kbd "C-c C-k") 'seba/start-nodejs-in-background)
    (defun seba/start-nodejs-in-background ()
      (interactive)
      (message "Not Implemented Yet")))
#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'scala-mode)
#+END_SRC

* Misc major modes

** Helm

   Helm is an Emacs framework for incremental completions and
   narrowing selections. It helps to rapidly complete file names,
   buffer names, or any other Emacs interactions requiring selecting
   an item from a list of possible choices.

#+BEGIN_SRC emacs-lisp
  (ensure-pkg 'helm)
  (require 'helm-config)
#+END_SRC

   Start helm everywhere, as opposed to ~M-x helm-M-x~.

#+BEGIN_SRC emacs-lisp
  (helm-mode 1)
#+END_SRC

   Auto resize helm window when enabled.
   Helm window is re-sized according to ‘helm-autoresize-max-height’
   and ‘helm-autoresize-min-height’.

#+BEGIN_SRC emacs-lisp
  (helm-autoresize-mode t)
#+END_SRC

   I think it is confusing when helm forces all windows to "jump
   around". Maybe i need to look at
   http://emacs.stackexchange.com/a/15172

   Forces split inside selected window when non-‘nil’.

#+BEGIN_SRC emacs-lisp
  (setq helm-split-window-in-side-p t)
#+END_SRC

   Auto update when only one candidate directory is matched.  Default
   value when starting ‘helm-find-files’ is nil because it prevent
   using <backspace> to delete char backward and by the way confuse
   beginners.  For a better experience with ‘helm-find-files’ set this
   to non--nil and use C-<backspace> to toggle it.

#+BEGIN_SRC emacs-lisp
  (setq helm-ff-auto-update-initial-value nil)
#+END_SRC

   Enable fuzzy matching in ‘helm-mode’ every-where possible.

#+BEGIN_SRC emacs-lisp
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-recentf-fuzzy-match t)
  (setq helm-locate-fuzzy-match t)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-semantic-fuzzy-match t)
  (setq helm-imenu-fuzzy-match t)
  (setq helm-apropos-fuzzy-match t)
  (setq helm-lisp-fuzzy-completion t)
#+END_SRC

  Bind Helm keys

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b")    'helm-buffers-list)
  (global-set-key (kbd "M-x")        'helm-M-x)
  (global-set-key (kbd "C-c h")      'helm-command-prefix)
  (global-set-key (kbd "C-x C-f")    'helm-find-files)
  (global-set-key (kbd "M-y")        'helm-show-kill-ring)
  (global-set-key (kbd "M-s o")      'helm-occur)
  (global-set-key (kbd "C-h SPC")    'helm-all-mark-rings)
#+END_SRC

  Rebind tab to run persistent action.

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
#+END_SRC
